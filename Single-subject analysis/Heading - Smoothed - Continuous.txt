// Heading - Smoothed - Continuous

// This code calculates the running average heading direction

// Enter the value of g_nSamplesQueue for the length of the running average window (default 5 samples = 1/6 s for a 30 fps video)

const   g_nSamplesQueue = 5;

// Initialize variables

var g_ptPrev;
 
// This function calculates an angle based on the two points and the x axis

function Head(pt1, pt2)
{
  var hd;

  if (pt1 != null && pt2 != null)
  {
     hd = Heading(pt1, pt2);
  }

  return hd;
}

// This function converts the angle from radians to degrees
function toDegrees(angle)

{
    return angle * (180 / Math.PI);
}

// This function creates an array that stores all the last g_nSamplesQueue for calculating the average

function RunningAverageQueueMissing(nSamplesMax)
{
    this.m_nSamplesMax = nSamplesMax;
    this.m_aValues     = [];
    
    this.Add = function(value) 
    {
        while (this.m_aValues.length >= this.m_nSamplesMax)
        {
          this.m_aValues.shift();
        }

        this.m_aValues.push(value);
    };

    this.Clear = function() 
    {
        this.m_aValues.length = 0;
    };

    this.GetAvg = function() 
    {
        var avg    = 0;
        var nTotal = 0;

        for (var n = 0; n != this.m_aValues.length; n++)
        {
            if (this.m_aValues[n] != null)
            {
               avg += this.m_aValues[n]; 
               ++nTotal;
            }
        }

        if (nTotal != 0)
        {
            avg /= nTotal;
        }
        else
        {
            avg = null;
        }

        return avg;
    };
}

//This calls the Running average queue function and stores the values in the queue 

var g_queue = new RunningAverageQueueMissing(g_nSamplesQueue);


function Start()
{
}

function Stop()
{
}

function Process()
{
   //get the current datapoint

   var pt = GetCenter();
 
   // Calculate the absolute value of heading

   var hd= Head(g_ptPrev, pt);
   
   if (hd != null)
   {
       hd = Math.abs(hd); 
   }

   //Add the current value of heading to the queue

    g_queue.Add(hd);

   //Calculate the new running average

   var HeadAvg = g_queue.GetAvg();

   if (HeadAvg != null)
   {
      HeadAvg = toDegrees(HeadAvg);
      SetOutput(HeadAvg);
   }
   else
   {
      SetOutputMissing();
   }

   g_ptPrev = pt;
}
